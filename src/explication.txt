building_tree_2.jl

comme building_tree.jl :
l 2& : ajout w[i] = rand(1:4) (detaille dataCount)
l107 et 109 : ajout des poids
pareil après

callback.jl

ajout : TOL l 2
MOI l 24
l93-94 : enleves les contraintes : de capacité controlant le passage dans le noeud fils gauche ; de capacité controlant le passage dans le noeud fils droit
l97-98 : enleves contraintes :  capacité controlant le passage dans le noeud fils gauche ; de capacité controlant le passage dans le noeud fils droit
la toute fin : is integer

    function my_cb_function(cb_data::CPLEX.CallbackContext, context_id::Clong)
        if isInteger(cb_data,context_id)
            CPLEX.load_callback_variable_primal(cb_data, context_id)
            a_aux=callback_value.(cb_data,a)
            u_at_aux=callback_value.(cb_data,u_at)
            b_aux=callback_value.(cb_data,b)
            if multivariate
                for i in 1:dataCount, t in 1:sepCount
                    if sum(a_aux[j, t]*x[i, j] for j in 1:featuresCount) + mu > b_aux[t] + (2+mu)*(1-u_at_aux[i, t*2])+TOL || sum(a_aux[j, t]*x[i, j]  for j in 1:featuresCount) +TOL < b_aux[t] - 2*(1-u_at_aux[i, t*2 + 1])
                        con=@build_constraint(sum(a[j, t]*x[i, j] for j in 1:featuresCount) + mu <= b[t] + (2+mu)*(1-u_at[i, t*2])) # contrainte de capacité controlant le passage dans le noeud fils gauche
                        con2=@build_constraint(sum(a[j, t]*x[i, j] for j in 1:featuresCount) >= b[t] - 2*(1-u_at[i, t*2 + 1])) # contrainte de capacité controlant le passage dans le noeud fils droit
                        MOI.submit(m,MOI.LazyConstraint(cb_data),con)
                        MOI.submit(m,MOI.LazyConstraint(cb_data),con2)
                        break
                    end
                end            
            else
                for i in 1:dataCount, t in 1:sepCount
                    if sum(a_aux[j, t]*(x[i, j]+mu_vect[j]-mu_min) for j in 1:featuresCount) + mu_min > b_aux[t] + (1+mu_max)*(1-u_at_aux[i, t*2]) + TOL || sum(a_aux[j, t]*x[i, j] for j in 1:featuresCount) + TOL < b_aux[t] - (1-u_at_aux[i, t*2 + 1])
                        con= @build_constraint(sum(a[j, t]*(x[i, j]+mu_vect[j]-mu_min) for j in 1:featuresCount) + mu_min <= b[t] + (1+mu_max)*(1-u_at[i, t*2])) # contrainte de capacité controlant le passage dans le noeud fils gauche
                        con2= @build_constraint(sum(a[j, t]*x[i, j] for j in 1:featuresCount) >= b[t] - (1-u_at[i, t*2 + 1])) # contrainte de capacité controlant le passage dans le noeud fils droit
                        MOI.submit(m,MOI.LazyConstraint(cb_data),con)
                        MOI.submit(m,MOI.LazyConstraint(cb_data),con2)
                        break
                    end
                end 
            end

        end    
    end 
    #set_optimizer_attribute(mp, "CPXPARAM_TimeLimit", maxTime) # seconds
    MOI.set(m, CPLEX.CallbackFunction(), my_cb_function)
